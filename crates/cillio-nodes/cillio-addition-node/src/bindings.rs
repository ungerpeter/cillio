// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
pub type Inputs = cillio_node::addition::types::Inputs;
pub type Outputs = cillio_node::addition::types::Outputs;
pub type Error = cillio_node::addition::types::Error;
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_process_cabi<T: Guest>(arg0: f32, arg1: f32) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::process(cillio_node::addition::types::Inputs { a: arg0, b: arg1 });
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    match result0 {
        Ok(e) => {
            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
            let cillio_node::addition::types::Outputs { sum: sum2 } = e;
            *ptr1.add(4).cast::<f32>() = _rt::as_f32(sum2);
        }
        Err(e) => {
            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
            use cillio_node::addition::types::Error as V4;
            match e {
                V4::ProcessError(e) => {
                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                    let vec3 = (e.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(12).cast::<usize>() = len3;
                    *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                }
            }
        }
    };
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_process<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => (),
        _ => {
            let l1 = i32::from(*arg0.add(4).cast::<u8>());
            match l1 {
                _ => {
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                }
            }
        }
    }
}
pub trait Guest {
    fn process(in_: Inputs) -> Result<Outputs, Error>;
}
#[doc(hidden)]

macro_rules! __export_world_addition_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "process"]
    unsafe extern "C" fn export_process(arg0: f32,arg1: f32,) -> *mut u8 {
      $($path_to_types)*::_export_process_cabi::<$ty>(arg0, arg1)
    }
    #[export_name = "cabi_post_process"]
    unsafe extern "C" fn _post_return_process(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_process::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_addition_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
#[allow(dead_code)]
pub mod cillio_node {
    #[allow(dead_code)]
    pub mod addition {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Inputs {
                pub a: f32,
                pub b: f32,
            }
            impl ::core::fmt::Debug for Inputs {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Inputs")
                        .field("a", &self.a)
                        .field("b", &self.b)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Outputs {
                pub sum: f32,
            }
            impl ::core::fmt::Debug for Outputs {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Outputs").field("sum", &self.sum).finish()
                }
            }
            #[derive(Clone)]
            pub enum Error {
                ProcessError(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ProcessError(e) => {
                            f.debug_tuple("Error::ProcessError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_addition_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_addition_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_addition_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:addition:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 382] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xff\x01\x01A\x02\x01\
A\x0b\x01B\x06\x01r\x02\x01av\x01bv\x04\0\x06inputs\x03\0\0\x01r\x01\x03sumv\x04\
\0\x07outputs\x03\0\x02\x01q\x01\x0dprocess-error\x01s\0\x04\0\x05error\x03\0\x04\
\x03\x01\x20cillio-node:addition/types@0.1.0\x05\0\x02\x03\0\0\x06inputs\x03\0\x06\
inputs\x03\0\x01\x02\x03\0\0\x07outputs\x03\0\x07outputs\x03\0\x03\x02\x03\0\0\x05\
error\x03\0\x05error\x03\0\x05\x01j\x01\x04\x01\x06\x01@\x01\x02in\x02\0\x07\x04\
\0\x07process\x01\x08\x04\x01#cillio-node:addition/addition@0.1.0\x04\0\x0b\x0e\x01\
\0\x08addition\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
